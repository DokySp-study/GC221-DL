tensor([[0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.]])
torch.float32
tensor([[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]], dtype=torch.int16)
A random tensor:
tensor([[0.3126, 0.3791],
        [0.3087, 0.0736]])

A different random tensor:
tensor([[0.4216, 0.0691],
        [0.2332, 0.4047]])

Should match r1:
tensor([[0.3126, 0.3791],
        [0.3087, 0.0736]])
tensor([[1., 1., 1.],
        [1., 1., 1.]])
tensor([[2., 2., 2.],
        [2., 2., 2.]])
tensor([[3., 3., 3.],
        [3., 3., 3.]])
torch.Size([2, 3])

A random matrix, r:
tensor([[ 0.9956, -0.2232],
        [ 0.3858, -0.6593]])

Absolute value of r:
tensor([[0.9956, 0.2232],
        [0.3858, 0.6593]])

Inverse sine of r:
tensor([[ 1.4775, -0.2251],
        [ 0.3961, -0.7199]])

Determinant of r:
tensor(-0.5703)

Singular value decomposition of r:
torch.return_types.svd(
U=tensor([[-0.8353, -0.5497],
        [-0.5497,  0.8353]]),
S=tensor([1.1793, 0.4836]),
V=tensor([[-0.8851, -0.4654],
        [ 0.4654, -0.8851]]))

Average and standard deviation of r:
(tensor(0.7217), tensor(0.1247))

Maximum value of r:
tensor(0.9956)

Minimum value of r:
tensor(-0.6593)
tensor([[0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.]])
torch.float32
tensor([[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]], dtype=torch.int16)
A random tensor:
tensor([[0.3126, 0.3791],
        [0.3087, 0.0736]])

A different random tensor:
tensor([[0.4216, 0.0691],
        [0.2332, 0.4047]])

Should match r1:
tensor([[0.3126, 0.3791],
        [0.3087, 0.0736]])
tensor([[1., 1., 1.],
        [1., 1., 1.]])
tensor([[2., 2., 2.],
        [2., 2., 2.]])
tensor([[3., 3., 3.],
        [3., 3., 3.]])
torch.Size([2, 3])

A random matrix, r:
tensor([[ 0.9956, -0.2232],
        [ 0.3858, -0.6593]])

Absolute value of r:
tensor([[0.9956, 0.2232],
        [0.3858, 0.6593]])

Inverse sine of r:
tensor([[ 1.4775, -0.2251],
        [ 0.3961, -0.7199]])

Determinant of r:
tensor(-0.5703)

Singular value decomposition of r:
torch.return_types.svd(
U=tensor([[-0.8353, -0.5497],
        [-0.5497,  0.8353]]),
S=tensor([1.1793, 0.4836]),
V=tensor([[-0.8851, -0.4654],
        [ 0.4654, -0.8851]]))

Average and standard deviation of r:
(tensor(0.7217), tensor(0.1247))

Maximum value of r:
tensor(0.9956)

Minimum value of r:
tensor(-0.6593)
tensor([[0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.]])
torch.float32
tensor([[1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1],
        [1, 1, 1]], dtype=torch.int16)
A random tensor:
tensor([[0.3126, 0.3791],
        [0.3087, 0.0736]])

A different random tensor:
tensor([[0.4216, 0.0691],
        [0.2332, 0.4047]])

Should match r1:
tensor([[0.3126, 0.3791],
        [0.3087, 0.0736]])
tensor([[1., 1., 1.],
        [1., 1., 1.]])
tensor([[2., 2., 2.],
        [2., 2., 2.]])
tensor([[3., 3., 3.],
        [3., 3., 3.]])
torch.Size([2, 3])

A random matrix, r:
tensor([[ 0.9956, -0.2232],
        [ 0.3858, -0.6593]])

Absolute value of r:
tensor([[0.9956, 0.2232],
        [0.3858, 0.6593]])

Inverse sine of r:
tensor([[ 1.4775, -0.2251],
        [ 0.3961, -0.7199]])

Determinant of r:
tensor(-0.5703)

Singular value decomposition of r:
torch.return_types.svd(
U=tensor([[-0.8353, -0.5497],
        [-0.5497,  0.8353]]),
S=tensor([1.1793, 0.4836]),
V=tensor([[-0.8851, -0.4654],
        [ 0.4654, -0.8851]]))

Average and standard deviation of r:
(tensor(0.7217), tensor(0.1247))

Maximum value of r:
tensor(0.9956)

Minimum value of r:
tensor(-0.6593)

# Creating Tensors
<class 'torch.Tensor'>
tensor([[9.8091e-45, 0.0000e+00, 0.0000e+00, 0.0000e+00],
        [3.5733e-43, 0.0000e+00, 0.0000e+00, 0.0000e+00],
        [0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00]])
zeros tensor([[0., 0., 0.],
        [0., 0., 0.]])
ones tensor([[1., 1., 1.],
        [1., 1., 1.]])
random tensor([[0.3126, 0.3791, 0.3087],
        [0.0736, 0.4216, 0.0691]])
random1 tensor([[0.3126, 0.3791, 0.3087],
        [0.0736, 0.4216, 0.0691]])
random2 tensor([[0.2332, 0.4047, 0.2162],
        [0.9927, 0.4128, 0.5938]])
random3 tensor([[0.3126, 0.3791, 0.3087],
        [0.0736, 0.4216, 0.0691]])
random4 tensor([[0.2332, 0.4047, 0.2162],
        [0.9927, 0.4128, 0.5938]])

# Tensor Shapes
torch.Size([2, 2, 3])
tensor([[[ 0.0000e+00, -1.0842e-19,  2.0091e-28],
         [ 8.5899e+09, -2.0000e+00,  1.6543e+00]],

        [[ 0.0000e+00,  1.3972e+00,  2.0000e+00],
         [ 1.7108e+00,  0.0000e+00,  1.3881e+00]]]) 

torch.Size([2, 2, 3])
tensor([[[-1.0842e-19,  2.0091e-28,  8.5899e+09],
         [-2.0000e+00,  1.6543e+00,  1.3972e+00]],

        [[ 2.0000e+00,  1.7108e+00,  1.3881e+00],
         [ 1.7108e+00,  0.0000e+00,  1.3881e+00]]]) 

torch.Size([2, 2, 3])
tensor([[[0., 0., 0.],
         [0., 0., 0.]],

        [[0., 0., 0.],
         [0., 0., 0.]]]) 

torch.Size([2, 2, 3])
tensor([[[1., 1., 1.],
         [1., 1., 1.]],

        [[1., 1., 1.],
         [1., 1., 1.]]]) 

torch.Size([2, 2, 3])
tensor([[[0.6128, 0.1519, 0.0453],
         [0.5035, 0.9978, 0.3884]],

        [[0.6929, 0.1703, 0.1384],
         [0.4759, 0.7481, 0.0361]]]) 

some_constants tensor([[3.1416, 2.7183],
        [1.6180, 0.0073]])
some_integers tensor([ 2,  3,  5,  7, 11, 13, 17, 19])
more_integers tensor([[2, 4, 6],
        [3, 6, 9]])

# Tensor Data Types
tensor([[1, 1, 1],
        [1, 1, 1]], dtype=torch.int16) 

tensor([[ 0.9956,  1.4148,  5.8364],
        [11.2406, 11.2083, 11.6692]], dtype=torch.float64) 

tensor([[ 0,  1,  5],
        [11, 11, 11]], dtype=torch.int32) 


# Math & Logic with PyTorch Tensors
ones tensor([[1., 1.],
        [1., 1.]])
twos tensor([[2., 2.],
        [2., 2.]])
threes tensor([[3., 3.],
        [3., 3.]])
fours tensor([[4., 4.],
        [4., 4.]])
sqrt2s tensor([[1.4142, 1.4142],
        [1.4142, 1.4142]])
powers2 tensor([[ 2.,  4.],
        [ 8., 16.]])
fives tensor([[5., 5.],
        [5., 5.]])
dozens tensor([[5., 5.],
        [5., 5.]])
rand tensor([[0.6146, 0.5999, 0.5013, 0.9397],
        [0.8656, 0.5207, 0.6865, 0.3614]])
doubled tensor([[1.2291, 1.1998, 1.0026, 1.8793],
        [1.7312, 1.0413, 1.3730, 0.7228]])
b tensor([[[0.6493, 0.2633],
         [0.4762, 0.0548],
         [0.2024, 0.5731]],

        [[0.6493, 0.2633],
         [0.4762, 0.0548],
         [0.2024, 0.5731]],

        [[0.6493, 0.2633],
         [0.4762, 0.0548],
         [0.2024, 0.5731]],

        [[0.6493, 0.2633],
         [0.4762, 0.0548],
         [0.2024, 0.5731]]])
c tensor([[[0.7191, 0.7191],
         [0.4067, 0.4067],
         [0.7301, 0.7301]],

        [[0.7191, 0.7191],
         [0.4067, 0.4067],
         [0.7301, 0.7301]],

        [[0.7191, 0.7191],
         [0.4067, 0.4067],
         [0.7301, 0.7301]],

        [[0.7191, 0.7191],
         [0.4067, 0.4067],
         [0.7301, 0.7301]]])
d tensor([[[0.6276, 0.7357],
         [0.6276, 0.7357],
         [0.6276, 0.7357]],

        [[0.6276, 0.7357],
         [0.6276, 0.7357],
         [0.6276, 0.7357]],

        [[0.6276, 0.7357],
         [0.6276, 0.7357],
         [0.6276, 0.7357]],

        [[0.6276, 0.7357],
         [0.6276, 0.7357],
         [0.6276, 0.7357]]])

# More Math with Tensors
Common functions:
abs tensor([[0.9238, 0.5724, 0.0791, 0.2629],
        [0.1986, 0.4439, 0.6434, 0.4776]])
ceil tensor([[-0., -0., 1., -0.],
        [-0., 1., 1., -0.]])
floor tensor([[-1., -1.,  0., -1.],
        [-1.,  0.,  0., -1.]])
clamp tensor([[-0.5000, -0.5000,  0.0791, -0.2629],
        [-0.1986,  0.4439,  0.5000, -0.4776]])

Sine and arcsine:
tensor([0.0000, 0.7854, 1.5708, 2.3562])
sin tensor([0.0000, 0.7071, 1.0000, 0.7071])
asin tensor([0.0000, 0.7854, 1.5708, 0.7854])

# Bitwise XOR:
tensor([3, 2, 1])

# Broadcasted, element - wise equality comparison:
tensor([[ True, False],
        [False, False]])

# Reduction ops:
tensor(4.)
4.0
tensor(2.5000)
tensor(1.2910)
tensor(24.)
tensor([1, 2])

# Vectors & Matrices:
tensor([[0.7375, 0.8328],
        [0.8444, 0.2941]])
tensor([[3., 0.],
        [0., 3.]])
tensor([ 0.,  0., -1.])
tensor([[0.7375, 0.8328],
        [0.8444, 0.2941]])
tensor([[2.2125, 2.4985],
        [2.5332, 0.8822]])
torch.return_types.svd(
U=tensor([[-0.7889, -0.6145],
        [-0.6145,  0.7889]]),
S=tensor([4.1498, 1.0548]),
V=tensor([[-0.7957,  0.6056],
        [-0.6056, -0.7957]]))

# Altering Tensors in Place (Inplace)
a:
tensor([0.0000, 0.7854, 1.5708, 2.3562])
tensor([0.0000, 0.7071, 1.0000, 0.7071])
tensor([0.0000, 0.7854, 1.5708, 2.3562])

b:
tensor([0.0000, 0.7854, 1.5708, 2.3562])
tensor([0.0000, 0.7071, 1.0000, 0.7071])
tensor([0.0000, 0.7071, 1.0000, 0.7071])
Before:
tensor([[1., 1.],
        [1., 1.]])
tensor([[0.3788, 0.4567],
        [0.0649, 0.6677]])

After adding:
tensor([[1.3788, 1.4567],
        [1.0649, 1.6677]])
tensor([[1.3788, 1.4567],
        [1.0649, 1.6677]])
tensor([[0.3788, 0.4567],
        [0.0649, 0.6677]])

After multiplying
tensor([[0.1435, 0.2086],
        [0.0042, 0.4459]])
tensor([[0.1435, 0.2086],
        [0.0042, 0.4459]])
tensor([[0., 0.],
        [0., 0.]])
tensor([[0.3653, 0.8699],
        [0.2364, 0.3604]])
tensor([[0.0776, 0.4004],
        [0.9877, 0.0352]])

# Copying Tensors
tensor([[  1., 561.],
        [  1.,   1.]])
tensor([[True, True],
        [True, True]])
tensor([[1., 1.],
        [1., 1.]])
tensor([[0.0905, 0.4485],
        [0.8740, 0.2526]], requires_grad=True)
tensor([[0.0905, 0.4485],
        [0.8740, 0.2526]], grad_fn=<CloneBackward0>)
tensor([[0.0905, 0.4485],
        [0.8740, 0.2526]])
tensor([[0.0905, 0.4485],
        [0.8740, 0.2526]], requires_grad=True)

# Moving to GPU
Sorry, CPU only.
Sorry, CPU only.
Device: cpu
tensor([[0.6923, 0.7545],
        [0.7746, 0.2330]])

# Manipulating Tensor Shapes - Changing the Number of Dimensions
a.shape torch.Size([3, 226, 226])
b.shape torch.Size([1, 3, 226, 226])
tensor([[[[[0.1506]]]]])
a.shape torch.Size([1, 20])
a tensor([[0.9585, 0.7756, 0.8973, 0.4929, 0.2367, 0.8194, 0.4509, 0.2690, 0.8381,
         0.8207, 0.6818, 0.5057, 0.9335, 0.9769, 0.2792, 0.3277, 0.5210, 0.7349,
         0.7823, 0.8637]])
b.shape torch.Size([20])
b tensor([0.9585, 0.7756, 0.8973, 0.4929, 0.2367, 0.8194, 0.4509, 0.2690, 0.8381,
        0.8207, 0.6818, 0.5057, 0.9335, 0.9769, 0.2792, 0.3277, 0.5210, 0.7349,
        0.7823, 0.8637])
a.shape torch.Size([20, 1])
a tensor([[0.1891],
        [0.3952],
        [0.9176],
        [0.8960],
        [0.4887],
        [0.8625],
        [0.6191],
        [0.9935],
        [0.1844],
        [0.6138],
        [0.6854],
        [0.0438],
        [0.0636],
        [0.2884],
        [0.4362],
        [0.2368],
        [0.1394],
        [0.1721],
        [0.1751],
        [0.3851]])
b.shape torch.Size([20, 1])
b tensor([[0.1891],
        [0.3952],
        [0.9176],
        [0.8960],
        [0.4887],
        [0.8625],
        [0.6191],
        [0.9935],
        [0.1844],
        [0.6138],
        [0.6854],
        [0.0438],
        [0.0636],
        [0.2884],
        [0.4362],
        [0.2368],
        [0.1394],
        [0.1721],
        [0.1751],
        [0.3851]])
c.shape torch.Size([2, 2])
d.shape torch.Size([2, 2])
c tensor([[[0.5351, 0.5351],
         [0.5078, 0.5078],
         [0.8012, 0.8012]],

        [[0.5351, 0.5351],
         [0.5078, 0.5078],
         [0.8012, 0.8012]],

        [[0.5351, 0.5351],
         [0.5078, 0.5078],
         [0.8012, 0.8012]],

        [[0.5351, 0.5351],
         [0.5078, 0.5078],
         [0.8012, 0.8012]]])
torch.Size([3, 1])
tensor([[[0.5088, 0.5088],
         [0.3142, 0.3142],
         [0.8068, 0.8068]],

        [[0.5088, 0.5088],
         [0.3142, 0.3142],
         [0.8068, 0.8068]],

        [[0.5088, 0.5088],
         [0.3142, 0.3142],
         [0.8068, 0.8068]],

        [[0.5088, 0.5088],
         [0.3142, 0.3142],
         [0.8068, 0.8068]]])
torch.Size([3, 226, 226])
torch.Size([1, 3, 226, 226])
torch.Size([6, 20, 20])
torch.Size([2400])
torch.Size([2400])

# NumPy Bridge
[[1. 1. 1.]
 [1. 1. 1.]]
tensor([[1., 1., 1.],
        [1., 1., 1.]], dtype=torch.float64)
tensor([[0.3976, 0.5647, 0.9160],
        [0.7783, 0.8277, 0.4579]])
[[0.39762992 0.5646949  0.91600937]
 [0.77828014 0.82769746 0.45785618]]
tensor([[ 1.,  1.,  1.],
        [ 1., 23.,  1.]], dtype=torch.float64)
[[ 0.39762992  0.5646949   0.91600937]
 [ 0.77828014 17.          0.45785618]]
